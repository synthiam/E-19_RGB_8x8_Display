D G "CHECK_BIT" 1 25 "(var,pos) ((var) & (1<<(pos)))"
D G "__PCM__" 0 212 ""5.021""
D G "__DEVICE__" 0 212 "1937"
D G "__DATE__" 0 212 ""13-May-16""
D G "__TIME__" 0 212 ""11:16:59"" "Standard Header file for the PIC16F1937 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 40 "int8" `54 
f B "set_tris_a" 2 40 "void(int8 value)" `53 
v L "value" 2 41 "int8" `56 
f B "set_tris_b" 2 41 "void(int8 value)" `55 
v L "value" 2 42 "int8" `58 
f B "set_tris_c" 2 42 "void(int8 value)" `57 
v L "value" 2 43 "int8" `60 
f B "set_tris_d" 2 43 "void(int8 value)" `59 
v L "value" 2 44 "int8" `62 
f B "set_tris_e" 2 44 "void(int8 value)" `61 
f B "get_tris_a" 2 45 "int8()" `63 
f B "get_tris_b" 2 46 "int8()" `64 
f B "get_tris_c" 2 47 "int8()" `65 
f B "get_tris_d" 2 48 "int8()" `66 
f B "get_tris_e" 2 49 "int8()" `67 
v L "value" 2 50 "int8" `69 
f B "output_a" 2 50 "void(int8 value)" `68 
v L "value" 2 51 "int8" `71 
f B "output_b" 2 51 "void(int8 value)" `70 
v L "value" 2 52 "int8" `73 
f B "output_c" 2 52 "void(int8 value)" `72 
v L "value" 2 53 "int8" `75 
f B "output_d" 2 53 "void(int8 value)" `74 
v L "value" 2 54 "int8" `77 
f B "output_e" 2 54 "void(int8 value)" `76 
f B "input_a" 2 55 "int8()" `78 
f B "input_b" 2 56 "int8()" `79 
f B "input_c" 2 57 "int8()" `80 
f B "input_d" 2 58 "int8()" `81 
f B "input_e" 2 59 "int8()" `82 
f B "input_change_a" 2 60 "int8()" `83 
f B "input_change_b" 2 61 "int8()" `84 
f B "input_change_c" 2 62 "int8()" `85 
f B "input_change_d" 2 63 "int8()" `86 
f B "input_change_e" 2 64 "int8()" `87 
v L "pin" 2 65 "int16" `89 
f B "input" 2 65 "int8(int16 pin)" `88 
v L "pin" 2 66 "int16" `91 
f B "input_state" 2 66 "int8(int16 pin)" `90 
v L "pin" 2 67 "int16" `93 
f B "output_low" 2 67 "void(int16 pin)" `92 
v L "pin" 2 68 "int16" `95 
f B "output_high" 2 68 "void(int16 pin)" `94 
v L "pin" 2 69 "int16" `97 
f B "output_toggle" 2 69 "void(int16 pin)" `96 
v L "pin" 2 70 "int16" `99 
v L "level" 2 70 "int8" `100 
f B "output_bit" 2 70 "void(int16 pin,int8 level)" `98 
v L "pin" 2 71 "int16" `102 
f B "output_float" 2 71 "void(int16 pin)" `101 
v L "pin" 2 72 "int16" `104 
f B "output_drive" 2 72 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 76 "96"
d G "PIN_A1" 2 77 "97"
d G "PIN_A2" 2 78 "98"
d G "PIN_A3" 2 79 "99"
d G "PIN_A4" 2 80 "100"
d G "PIN_A5" 2 81 "101"
d G "PIN_A6" 2 82 "102"
d G "PIN_A7" 2 83 "103"
d G "PIN_B0" 2 85 "104"
d G "PIN_B1" 2 86 "105"
d G "PIN_B2" 2 87 "106"
d G "PIN_B3" 2 88 "107"
d G "PIN_B4" 2 89 "108"
d G "PIN_B5" 2 90 "109"
d G "PIN_B6" 2 91 "110"
d G "PIN_B7" 2 92 "111"
d G "PIN_C0" 2 94 "112"
d G "PIN_C1" 2 95 "113"
d G "PIN_C2" 2 96 "114"
d G "PIN_C3" 2 97 "115"
d G "PIN_C4" 2 98 "116"
d G "PIN_C5" 2 99 "117"
d G "PIN_C6" 2 100 "118"
d G "PIN_C7" 2 101 "119"
d G "PIN_D0" 2 103 "120"
d G "PIN_D1" 2 104 "121"
d G "PIN_D2" 2 105 "122"
d G "PIN_D3" 2 106 "123"
d G "PIN_D4" 2 107 "124"
d G "PIN_D5" 2 108 "125"
d G "PIN_D6" 2 109 "126"
d G "PIN_D7" 2 110 "127"
d G "PIN_E0" 2 112 "128"
d G "PIN_E1" 2 113 "129"
d G "PIN_E2" 2 114 "130"
d G "PIN_E3" 2 115 "131"
d G "FALSE" 2 118 "0"
d G "TRUE" 2 119 "1"
d G "BYTE" 2 121 "int8"
d G "BOOLEAN" 2 122 "int1"
d G "getc" 2 124 "getch"
d G "fgetc" 2 125 "getch"
d G "getchar" 2 126 "getch"
d G "putc" 2 127 "putchar"
d G "fputc" 2 128 "putchar"
d G "fgets" 2 129 "gets"
d G "fputs" 2 130 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 135 "int8()" `105 
f B "reset_cpu" 2 136 "void()" `106 
f B "sleep" 2 137 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 139 "0x3C"
d G "BROWNOUT_RESTART" 2 140 "0x3E"
d G "MCLR_FROM_SLEEP" 2 141 "0x27"
d G "WDT_TIMEOUT" 2 142 "0x1F"
d G "WDT_FROM_SLEEP" 2 143 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 144 "0x2F"
d G "MCLR_FROM_RUN" 2 145 "0x37"
d G "RESET_INSTRUCTION" 2 146 "0x3B"
d G "STACK_OVERFLOW" 2 147 "0xBF"
d G "STACK_UNDERFLOW" 2 148 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 155 "int8" `109 
f B "setup_timer_0" 2 155 "void(int8 mode)" `108 
v L "value" 2 156 "int8" `111 
f B "set_timer0" 2 156 "void(int8 value)" `110 
f B "get_timer0" 2 157 "int8()" `112 
v L "mode" 2 158 "int8" `114 
v L "prescaler" 2 158 "int8" `115 
f B "setup_counters" 2 158 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 159 "int8" `117 
f B "set_rtcc" 2 159 "void(int8 value)" `116 
f B "get_rtcc" 2 160 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 162 "0"
d G "T0_EXT_L_TO_H" 2 163 "32"
d G "T0_EXT_H_TO_L" 2 164 "48"
d G "T0_DIV_1" 2 166 "8"
d G "T0_DIV_2" 2 167 "0"
d G "T0_DIV_4" 2 168 "1"
d G "T0_DIV_8" 2 169 "2"
d G "T0_DIV_16" 2 170 "3"
d G "T0_DIV_32" 2 171 "4"
d G "T0_DIV_64" 2 172 "5"
d G "T0_DIV_128" 2 173 "6"
d G "T0_DIV_256" 2 174 "7"
d G "T0_8_BIT" 2 177 "0"
d G "RTCC_INTERNAL" 2 179 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 180 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 181 "48"
d G "RTCC_DIV_1" 2 182 "8"
d G "RTCC_DIV_2" 2 183 "0"
d G "RTCC_DIV_4" 2 184 "1"
d G "RTCC_DIV_8" 2 185 "2"
d G "RTCC_DIV_16" 2 186 "3"
d G "RTCC_DIV_32" 2 187 "4"
d G "RTCC_DIV_64" 2 188 "5"
d G "RTCC_DIV_128" 2 189 "6"
d G "RTCC_DIV_256" 2 190 "7"
d G "RTCC_8_BIT" 2 191 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
v L "mode" 2 201 "int16" `120 
f B "setup_wdt" 2 201 "void(int16 mode)" `119 
f B "restart_wdt" 2 202 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 204 "0x1000"
d G "WDT_OFF" 2 205 "0x2000"
d G "WDT_1MS" 2 207 "0x100"
d G "WDT_2MS" 2 208 "0x101"
d G "WDT_4MS" 2 209 "0x102"
d G "WDT_8MS" 2 210 "0x103"
d G "WDT_16MS" 2 211 "0x104"
d G "WDT_32MS" 2 212 "0x105"
d G "WDT_64MS" 2 213 "0x106"
d G "WDT_128MS" 2 214 "0x107"
d G "WDT_256MS" 2 215 "0x108"
d G "WDT_512MS" 2 216 "0x109"
d G "WDT_1S" 2 217 "0x10A"
d G "WDT_2S" 2 218 "0x10B"
d G "WDT_4S" 2 219 "0x10C"
d G "WDT_8S" 2 220 "0x10D"
d G "WDT_16S" 2 221 "0x10E"
d G "WDT_32S" 2 222 "0x10F"
d G "WDT_64S" 2 223 "0x110"
d G "WDT_128S" 2 224 "0x111"
d G "WDT_256S" 2 225 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 230 "int16" `123 
f B "setup_timer_1" 2 230 "void(int16 mode)" `122 
f B "get_timer1" 2 231 "int16()" `124 
v L "value" 2 232 "int16" `126 
f B "set_timer1" 2 232 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 235 "0"
d G "T1_CAPSENSE" 2 236 "0xC5"
d G "T1_EXTERNAL" 2 237 "0x85"
d G "T1_EXTERNAL_SYNC" 2 238 "0x81"
d G "T1_FOSC" 2 239 "0x45"
d G "T1_INTERNAL" 2 240 "0x05"
d G "T1_ENABLE_T1OSC" 2 242 "0x08"
d G "T1_DIV_BY_1" 2 244 "0x00"
d G "T1_DIV_BY_2" 2 245 "0x10"
d G "T1_DIV_BY_4" 2 246 "0x20"
d G "T1_DIV_BY_8" 2 247 "0x30"
d G "T1_GATE" 2 249 "0x8000"
d G "T1_GATE_INVERTED" 2 250 "0xC000"
d G "T1_GATE_TOGGLE" 2 251 "0xA000"
d G "T1_GATE_SINGLE" 2 252 "0x9000"
d G "T1_GATE_TIMER0" 2 253 "0x8100"
d G "T1_GATE_COMP1" 2 254 "0x8200"
d G "T1_GATE_COMP2" 2 255 "0x8300"
d G "T1_GATE_B5" 2 257 "0"
d G "T1_GATE_C4" 2 258 "0x10000"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 263 "int8" `128 
v L "period" 2 263 "int8" `129 
v L "postscale" 2 263 "int8" `130 
f B "setup_timer_2" 2 263 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 264 "int8()" `131 
v L "value" 2 265 "int8" `133 
f B "set_timer2" 2 265 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 267 "0"
d G "T2_DIV_BY_1" 2 268 "4"
d G "T2_DIV_BY_4" 2 269 "5"
d G "T2_DIV_BY_16" 2 270 "6"
d G "T2_DIV_BY_64" 2 271 "7"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 276 "int16" `135 
v L "period" 2 276 "int8" `136 
v L "postscaler" 2 276 "int8" `137 
f B "setup_timer_4" 2 276 "void(int16 mode,int8 period,int8 postscaler)" `134 
f B "get_timer4" 2 277 "int8()" `138 
v L "value" 2 278 "int8" `140 
f B "set_timer4" 2 278 "void(int8 value)" `139  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 280 "0"
d G "T4_DIV_BY_1" 2 281 "4"
d G "T4_DIV_BY_4" 2 282 "5"
d G "T4_DIV_BY_16" 2 283 "6"
d G "T4_DIV_BY_64" 2 284 "7"
c L "set_timer4" 2 3 3 "FUNCTION"
v L "mode" 2 289 "int8" `142 
v L "period" 2 289 "int8" `143 
v L "postscaler" 2 289 "int8" `144 
f B "setup_timer_6" 2 289 "void(int8 mode,int8 period,int8 postscaler)" `141 
f B "get_timer6" 2 290 "int8()" `145 
v L "value" 2 291 "int8" `147 
f B "set_timer6" 2 291 "void(int8 value)" `146  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 294 "0"
d G "T6_DIV_BY_1" 2 295 "4"
d G "T6_DIV_BY_4" 2 296 "5"
d G "T6_DIV_BY_16" 2 297 "6"
d G "T6_DIV_BY_64" 2 298 "7"
c L "set_timer6" 2 3 4 "FUNCTION"
v L "mode" 2 304 "int32" `149 
f B "setup_ccp1" 2 304 "void(int32 mode)" `148 
v L "mode" 2 305 "int32" `151 
v L "pwm" 2 305 "int8" `152 
f G "setup_ccp1" 2 305 "void(int32 mode,int8 pwm)" `150 
v L "value" 2 306 "int16" `154 
f B "set_pwm1_duty" 2 306 "void(int16 value)" `153  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 308 "0"
d G "CCP_CAPTURE_FE" 2 309 "4"
d G "CCP_CAPTURE_RE" 2 310 "5"
d G "CCP_CAPTURE_DIV_4" 2 311 "6"
d G "CCP_CAPTURE_DIV_16" 2 312 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 313 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 314 "9"
d G "CCP_COMPARE_INT" 2 315 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 316 "0xB"
d G "CCP_PWM" 2 317 "0xC"
d G "CCP_PWM_PLUS_1" 2 318 "0x1c"
d G "CCP_PWM_PLUS_2" 2 319 "0x2c"
d G "CCP_PWM_PLUS_3" 2 320 "0x3c"
d G "CCP_PWM_H_H" 2 325 "0x0c"
d G "CCP_PWM_H_L" 2 326 "0x0d"
d G "CCP_PWM_L_H" 2 327 "0x0e"
d G "CCP_PWM_L_L" 2 328 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 330 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 331 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 332 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 334 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 335 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 336 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 337 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 338 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 339 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 340 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 342 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 343 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 344 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 346 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 347 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 348 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 350 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 352 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 353 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 354 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 355 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 356 "0x10000000"
d G "CCP_TIMER2" 2 359 "0x0000"
d G "CCP_TIMER4" 2 360 "0x1000"
d G "CCP_TIMER6" 2 361 "0x2000"
d G "CCP2_C1" 2 363 "0x000"
d G "CCP2_B3" 2 364 "0x100"
d G "CCP_P2B_C0" 2 365 "0x000"
d G "CCP_P2B_D2" 2 366 "0x200"
d G "CCP3_E0" 2 367 "0x000"
d G "CCP3_B5" 2 368 "0x100"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 372 "int32" `159 
f B "setup_ccp2" 2 372 "void(int32 mode)" `158 
v L "mode" 2 373 "int32" `161 
v L "pwm" 2 373 "int8" `162 
f G "setup_ccp2" 2 373 "void(int32 mode,int8 pwm)" `160 
v L "value" 2 374 "int16" `164 
f B "set_pwm2_duty" 2 374 "void(int16 value)" `163 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
v L "mode" 2 380 "int32" `169 
f B "setup_ccp3" 2 380 "void(int32 mode)" `168 
v L "mode" 2 381 "int32" `171 
v L "pwm" 2 381 "int8" `172 
f G "setup_ccp3" 2 381 "void(int32 mode,int8 pwm)" `170 
v L "value" 2 382 "int16" `174 
f B "set_pwm3_duty" 2 382 "void(int16 value)" `173 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
v L "mode" 2 388 "int32" `179 
f B "setup_ccp4" 2 388 "void(int32 mode)" `178 
v L "mode" 2 389 "int32" `181 
v L "pwm" 2 389 "int8" `182 
f G "setup_ccp4" 2 389 "void(int32 mode,int8 pwm)" `180 
v L "value" 2 390 "int16" `184 
f B "set_pwm4_duty" 2 390 "void(int16 value)" `183 
c L "set_pwm4_duty" 2 3 1 "FUNCTION"
v L "mode" 2 396 "int32" `189 
f B "setup_ccp5" 2 396 "void(int32 mode)" `188 
v L "mode" 2 397 "int32" `191 
v L "pwm" 2 397 "int8" `192 
f G "setup_ccp5" 2 397 "void(int32 mode,int8 pwm)" `190 
v L "value" 2 398 "int16" `194 
f B "set_pwm5_duty" 2 398 "void(int16 value)" `193 
c L "set_pwm5_duty" 2 3 3 "FUNCTION"
v L "mode" 2 405 "int32" `199 
f B "setup_spi" 2 405 "void(int32 mode)" `198 
v L "value" 2 406 "int8" `201 
f B "spi_write" 2 406 "void(int8 value)" `200 
f B "spi_read" 2 407 "int8()" `202 
v L "value" 2 408 "int8" `204 
f G "spi_read" 2 408 "int8(int8 value)" `203 
f B "spi_data_in" 2 409 "int8()" `205  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 411 "0x00"
d G "SPI_MASTER" 2 412 "0x20"
d G "SPI_SLAVE" 2 413 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 414 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 415 "0x00"
d G "SPI_CLK_DIV_4" 2 416 "0x00"
d G "SPI_CLK_DIV_16" 2 417 "0x01"
d G "SPI_CLK_DIV_64" 2 418 "0x02"
d G "SPI_CLK_T2" 2 419 "0x03"
d G "SPI_SS_DISABLED" 2 420 "0x01"
d G "SPI_SS_A5" 2 422 "0x000"
d G "SPI_SS_A0" 2 423 "0x10000"
d G "SPI_XMIT_L_TO_H" 2 425 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 426 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 428 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 429 "0x8000"
d G "SPI_L_TO_H" 2 432 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 433 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 437 "int32" `207 
f B "setup_uart" 2 437 "void(int32 baud)" `206 
v L "baud" 2 438 "int32" `209 
v L "stream" 2 438 "int8" `210 
f G "setup_uart" 2 438 "void(int32 baud,int8 stream)" `208 
v L "baud" 2 439 "int32" `212 
v L "stream" 2 439 "int8" `213 
v L "clock" 2 439 "int32" `214 
f G "setup_uart" 2 439 "void(int32 baud,int8 stream,int32 clock)" `211 
v L "baud" 2 440 "int32" `216 
f B "set_uart_speed" 2 440 "void(int32 baud)" `215 
v L "baud" 2 441 "int32" `218 
v L "stream" 2 441 "int8" `219 
f G "set_uart_speed" 2 441 "void(int32 baud,int8 stream)" `217 
v L "baud" 2 442 "int32" `221 
v L "stream" 2 442 "int8" `222 
v L "clock" 2 442 "int32" `223 
f G "set_uart_speed" 2 442 "void(int32 baud,int8 stream,int32 clock)" `220  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 446 "2"
d G "UART_DATA" 2 447 "4"
d G "UART_AUTODETECT" 2 448 "8"
d G "UART_AUTODETECT_NOWAIT" 2 449 "9"
d G "UART_WAKEUP_ON_RDA" 2 450 "10"
d G "UART_SEND_BREAK" 2 451 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 455 "int32" `225 
f B "setup_comparator" 2 455 "void(int32 mode)" `224  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 458 "0x00"
d G "CP1_A0_A3" 2 461 "0x8000"
d G "CP1_A1_A3" 2 462 "0x8001"
d G "CP1_B3_A3" 2 463 "0x8002"
d G "CP1_B1_A3" 2 464 "0x8003"
d G "CP1_A0_DAC" 2 465 "0x8010"
d G "CP1_A1_DAC" 2 466 "0x8011"
d G "CP1_B3_DAC" 2 467 "0x8012"
d G "CP1_B1_DAC" 2 468 "0x8013"
d G "CP1_A0_FVR" 2 469 "0x8020"
d G "CP1_A1_FVR" 2 470 "0x8021"
d G "CP1_B3_FVR" 2 471 "0x8022"
d G "CP1_B1_FVR" 2 472 "0x8023"
d G "CP1_A0_VSS" 2 473 "0x8030"
d G "CP1_A1_VSS" 2 474 "0x8031"
d G "CP1_B3_VSS" 2 475 "0x8032"
d G "CP1_B1_VSS" 2 476 "0x8033"
d G "CP1_INT_H2L" 2 478 "0x0040"
d G "CP1_INT_L2H" 2 479 "0x0080"
d G "CP1_OUT_ON_A4" 2 480 "0x2000"
d G "CP1_INVERT" 2 481 "0x1000"
d G "CP1_FAST" 2 482 "0x0400"
d G "CP1_HYST" 2 483 "0x0200"
d G "CP1_SYNC" 2 484 "0x0100"
d G "CP2_A0_A2" 2 487 "0x80000000"
d G "CP2_A1_A2" 2 488 "0x80010000"
d G "CP2_B3_A2" 2 489 "0x80020000"
d G "CP2_B1_A2" 2 490 "0x80030000"
d G "CP2_A0_DAC" 2 491 "0x80100000"
d G "CP2_A1_DAC" 2 492 "0x80110000"
d G "CP2_B3_DAC" 2 493 "0x80120000"
d G "CP2_B1_DAC" 2 494 "0x80130000"
d G "CP2_A0_FVR" 2 495 "0x80200000"
d G "CP2_A1_FVR" 2 496 "0x80210000"
d G "CP2_B3_FVR" 2 497 "0x80220000"
d G "CP2_B1_FVR" 2 498 "0x80230000"
d G "CP2_A0_VSS" 2 499 "0x80300000"
d G "CP2_A1_VSS" 2 500 "0x80310000"
d G "CP2_B3_VSS" 2 501 "0x80320000"
d G "CP2_B1_VSS" 2 502 "0x80330000"
d G "CP2_INT_H2L" 2 504 "0x00400000"
d G "CP2_INT_L2H" 2 505 "0x00800000"
d G "CP2_OUT_ON_A5" 2 506 "0x20000000"
d G "CP2_OUT_ON_A0" 2 507 "0x60000000"
d G "CP2_INVERT" 2 508 "0x10000000"
d G "CP2_FAST" 2 509 "0x04000000"
d G "CP2_HYST" 2 510 "0x02000000"
d G "CP2_SYNC" 2 511 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 518 "int8" `229 
f B "setup_vref" 2 518 "void(int8 mode)" `228  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 520 "0"
d G "VREF_ON" 2 521 "0x80"
d G "VREF_ADC_OFF" 2 523 "0"
d G "VREF_ADC_1v024" 2 524 "0x01"
d G "VREF_ADC_2v048" 2 525 "0x02"
d G "VREF_ADC_4v096" 2 526 "0x03"
d G "VREF_COMP_DAC_OFF" 2 528 "0"
d G "VREF_COMP_DAC_1v024" 2 529 "0x04"
d G "VREF_COMP_DAC_2v048" 2 530 "0x08"
d G "VREF_COMP_DAC_4v096" 2 531 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 533 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 534 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 535 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 536 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 541 "int8" `231 
f B "setup_dac" 2 541 "void(int8 mode)" `230 
v L "value" 2 542 "int8" `233 
f B "dac_write" 2 542 "void(int8 value)" `232  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 544 "0"
d G "DAC_VSS_VDD" 2 545 "0x80"
d G "DAC_VREF_VDD" 2 546 "0x81"
d G "DAC_VSS_VREF" 2 547 "0x84"
d G "DAC_VREF_VREF" 2 548 "0x85"
d G "DAC_VSS_FVR" 2 549 "0x88"
d G "DAC_VREF_FVR" 2 550 "0x89"
d G "DAC_OUTPUT" 2 552 "0x20"
d G "DAC_LVP_POS" 2 553 "0x40"
d G "DAC_LVP_NEG" 2 554 "0"
c L "dac_write" 2 3 3 "FUNCTION"
v L "mode" 2 559 "int16" `235 
v L "prescale" 2 559 "int8" `236 
v L "segments" 2 559 "int32" `237 
f B "setup_lcd" 2 559 "void(int16 mode,int8 prescale,int32 segments)" `234 
v L "buffer_pointer" 2 560 "*int8" `239 
v L "offset" 2 560 "int8" `240 
v L "length" 2 560 "int8" `241 
f B "lcd_load" 2 560 "void(*int8 buffer_pointer,int8 offset,int8 length)" `238 
v L "symbol" 2 561 "int16" `243 
v L "b1_addr" 2 561 "int8" `244 
f B "lcd_symbol" 2 561 "void(int16 symbol,int8 b1_addr,*int8 _VA_LIST)" `242 
v L "contrast" 2 562 "int8" `247 
f B "lcd_contrast" 2 562 "void(int8 contrast)" `246  "Constants used in setup_lcd() are:"
d G "LCD_STATIC" 2 566 "0x0000000080"
d G "LCD_MUX12" 2 567 "0x0000000081"
d G "LCD_MUX13" 2 568 "0x0000000082"
d G "LCD_MUX14" 2 569 "0x0000000083"
d G "LCD_DISABLED" 2 570 "0x0000000000"
d G "LCD_HALT_IDLE" 2 574 "0x0000000040"
d G "LCD_CONTINUE_IDLE" 2 575 "0x0000000000" "default"
d G "LCD_FOSC" 2 578 "0x0000000000" "default"
d G "LCD_TIMER1" 2 579 "0x0000000004"
d G "LCD_LFINTOSC" 2 580 "0x0000000008"
d G "LCD_TYPE_B" 2 583 "0x0000008000"
d G "LCD_TYPE_A" 2 584 "0x0000000000" "default"
d G "LCD_BIAS12" 2 587 "0x0000004000"
d G "LCD_BIAS13" 2 588 "0x0000000000" "default"
d G "LCD_REF_ENABLED" 2 591 "0x0000800000"
d G "LCD_REF_DISABLED" 2 592 "0x0000000000" "default"
d G "LCD_REF_VDD" 2 595 "0x0000000000" "default"
d G "LCD_REF_FVR" 2 596 "0x0000400000"
d G "LCD_FVR_DISABLED" 2 599 "0x0000200000"
d G "LCD_FVR_IGNORE" 2 600 "0x0000000000" "default"
d G "LCD_VOLTAGE3" 2 603 "0x0000080000"
d G "LCD_VOLTAGE2" 2 604 "0x0000040000"
d G "LCD_VOLTAGE1" 2 605 "0x0000020000"
d G "LCD_NO_VOLTAGE" 2 606 "0x0000000000" "default"
d G "LCD_A_NO_POWER" 2 609 "0x0000000000" "default"
d G "LCD_A_LOW_POWER" 2 610 "0x0040000000"
d G "LCD_A_MED_POWER" 2 611 "0x0080000000"
d G "LCD_A_HIGH_POWER" 2 612 "0x00C0000000"
d G "LCD_B_NO_POWER" 2 615 "0x0000000000" "default"
d G "LCD_B_LOW_POWER" 2 616 "0x0010000000"
d G "LCD_B_MED_POWER" 2 617 "0x0020000000"
d G "LCD_B_HIGH_POWER" 2 618 "0x0030000000"
d G "LCD_B_ONLY" 2 621 "0x0000000000" "default"
d G "LCD_A_CLOCK1" 2 622 "0x0001000000"
d G "LCD_A_CLOCK2" 2 623 "0x0002000000"
d G "LCD_A_CLOCK3" 2 624 "0x0003000000"
d G "LCD_A_CLOCK4" 2 625 "0x0004000000"
d G "LCD_A_CLOCK5" 2 626 "0x0005000000"
d G "LCD_A_CLOCK6" 2 627 "0x0006000000"
d G "LCD_A_CLOCK7" 2 628 "0x0007000000"
d G "COM0" 2 631 "0"
d G "COM1" 2 632 "24"
d G "COM2" 2 633 "48"
d G "COM3" 2 634 "72"
c L "lcd_contrast" 2 3 2 "FUNCTION"
v L "mode" 2 639 "int8" `249 
f B "setup_oscillator" 2 639 "void(int8 mode)" `248  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 642 "0"
d G "OSC_31250" 2 643 " (2*8)"
d G "OSC_62KHZ" 2 644 " (4*8)"
d G "OSC_125KHZ" 2 645 " (5*8)"
d G "OSC_250KHZ" 2 646 " (6*8)"
d G "OSC_500KHZ" 2 647 " (7*8)"
d G "OSC_1MHZ" 2 648 " (11*8)"
d G "OSC_2MHZ" 2 649 " (12*8)"
d G "OSC_4MHZ" 2 650 " (13*8)"
d G "OSC_8MHZ" 2 651 " (14*8)"
d G "OSC_16MHZ" 2 652 " (15*8)"
d G "OSC_TIMER1" 2 654 "1"
d G "OSC_INTRC" 2 655 "2"
d G "OSC_NORMAL" 2 656 "0"
d G "OSC_PLL_ON" 2 658 "0x80"
d G "OSC_PLL_OFF" 2 659 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 666 "int16" `251 
f B "setup_adc" 2 666 "void(int16 mode)" `250 
f B "read_adc" 2 667 "int8()" `252 
v L "mode" 2 668 "int8" `254 
f G "read_adc" 2 668 "int8(int8 mode)" `253 
f G "read_adc" 2 669 "int16()" `255 
v L "mode" 2 670 "int8" `257 
f G "read_adc" 2 670 "int16(int8 mode)" `256 
f B "adc_done" 2 671 "int8()" `258  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 673 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 674 "0x100"
d G "ADC_CLOCK_DIV_4" 2 675 "0x40"
d G "ADC_CLOCK_DIV_8" 2 676 "0x10"
d G "ADC_CLOCK_DIV_32" 2 677 "0x20"
d G "ADC_CLOCK_DIV_16" 2 678 "0x50"
d G "ADC_CLOCK_DIV_64" 2 679 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 680 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 683 "int32" `260 
f B "setup_adc_ports" 2 683 "void(int32 pins)" `259 
v L "pins" 2 684 "int32" `262 
v L "reference" 2 684 "int32" `263 
f G "setup_adc_ports" 2 684 "void(int32 pins,int32 reference)" `261 
v L "channel" 2 685 "int8" `265 
f B "set_adc_channel" 2 685 "void(int8 channel)" `264  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 689 "0x01000000" "| A0"
d G "sAN1" 2 690 "0x02000000" "| A1"
d G "sAN2" 2 691 "0x04000000" "| A2"
d G "sAN3" 2 692 "0x08000000" "| A3"
d G "sAN4" 2 693 "0x20000000" "| A5"
d G "sAN5" 2 694 "0x00010000" "| E0"
d G "sAN6" 2 695 "0x00020000" "| E1"
d G "sAN7" 2 696 "0x00040000" "| E2"
d G "sAN8" 2 697 "0x00000400" "| B2"
d G "sAN9" 2 698 "0x00000800" "| B3"
d G "sAN10" 2 699 "0x00000200" "| B1"
d G "sAN11" 2 700 "0x00001000" "| B4"
d G "sAN12" 2 701 "0x00000100" "| B0"
d G "sAN13" 2 702 "0x00002000" "| B5"
d G "NO_ANALOGS" 2 703 "0" "None"
d G "ALL_ANALOG" 2 704 "0x2F073F00" "A0 A1 A2 A3 A4 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 2 707 "0x00" "| Range 0-Vdd"
d G "VSS_VREF" 2 708 "0x02" "| Range 0-VrefH"
d G "VSS_FVR" 2 709 "0x03" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 2 710 "0x04" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 711 "0x06" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 712 "0x07" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 2 716 "0x1D"
d G "DAC_CHANNEL" 2 717 "0x1E"
d G "FVR_CHANNEL" 2 718 "0x1F"
d G "ADC_START_AND_READ" 2 721 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 722 "1"
d G "ADC_READ_ONLY" 2 723 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 729 "sint8" `267 
f B "abs" 2 729 "sint8(sint8 x)" `266 
v L "x" 2 730 "sint16" `269 
f G "abs" 2 730 "sint16(sint16 x)" `268 
v L "x" 2 731 "sint32" `271 
f G "abs" 2 731 "sint32(sint32 x)" `270 
v L "x" 2 732 "float" `273 
f G "abs" 2 732 "float(float x)" `272 
v L "??65535" 2 733 "int8" `275 
v L "??65535" 2 733 "int8" `276 
f B "_mul" 2 733 "int16(int8 ,int8 )" `274 
v L "??65535" 2 734 "sint8" `275 
v L "??65535" 2 734 "sint8" `279 
f G "_mul" 2 734 "sint16(sint8 ,sint8 )" `277 
v L "??65535" 2 735 "int16" `275 
v L "??65535" 2 735 "int16" `282 
f G "_mul" 2 735 "int32(int16 ,int16 )" `280 
v L "??65535" 2 736 "sint16" `275 
v L "??65535" 2 736 "sint16" `285 
f G "_mul" 2 736 "sint32(sint16 ,sint16 )" `283  "Memory Manipulation Prototypes:"
v L "bank" 2 739 "int8" `287 
v L "offset" 2 739 "int8" `288 
f B "read_bank" 2 739 "int8(int8 bank,int8 offset)" `286 
v L "bank" 2 740 "int8" `290 
v L "offset" 2 740 "int8" `291 
v L "value" 2 740 "int8" `292 
f B "write_bank" 2 740 "void(int8 bank,int8 offset,int8 value)" `289 
v L "dest" 2 741 "*int8" `294 
v L "src" 2 741 "*int8" `295 
f B "strcpy" 2 741 "void(*int8 dest,*int8 src)" `293 
v L "dest" 2 742 "*int8" `297 
v L "src" 2 742 "*int8" `298 
f B "strcopy" 2 742 "void(*int8 dest,*int8 src)" `296 
v L "destination" 2 743 "*int8" `300 
v L "value" 2 743 "int8" `301 
v L "num" 2 743 "int16" `302 
f B "memset" 2 743 "void(*int8 destination,int8 value,int16 num)" `299 
v L "destination" 2 744 "*int8" `304 
v L "source" 2 744 "*int8" `305 
v L "num" 2 744 "int16" `306 
f B "memcpy" 2 744 "void(*int8 destination,*int8 source,int16 num)" `303  "String Prototypes:"
v L "cvalue" 2 747 "int8" `308 
f B "toupper" 2 747 "int8(int8 cvalue)" `307 
v L "cvalue" 2 748 "int8" `310 
f B "tolower" 2 748 "int8(int8 cvalue)" `309 
v L "string" 2 749 "*int8" `312 
v L "cstring" 2 749 "*int8" `313 
f B "sprintf" 2 749 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `311  "Data Manipulators Prototypes:"
v L "address" 2 752 "*int8" `316 
v L "bytes" 2 752 "int8" `317 
v L "value" 2 752 "int8" `318 
f B "shift_left" 2 752 "int8(*int8 address,int8 bytes,int8 value)" `315 
v L "address" 2 753 "*int8" `320 
v L "bytes" 2 753 "int8" `321 
v L "value" 2 753 "int8" `322 
f B "shift_right" 2 753 "int8(*int8 address,int8 bytes,int8 value)" `319 
v L "address" 2 754 "*int8" `324 
v L "bytes" 2 754 "int8" `325 
f B "rotate_left" 2 754 "void(*int8 address,int8 bytes)" `323 
v L "address" 2 755 "*int8" `327 
v L "bytes" 2 755 "int8" `328 
f B "rotate_right" 2 755 "void(*int8 address,int8 bytes)" `326 
v L "value" 2 756 "int8" `330 
f B "swap" 2 756 "void(int8 value)" `329 
v L "var" 2 757 "int16" `332 
v L "offset" 2 757 "int8" `333 
f B "make8" 2 757 "int8(int16 var,int8 offset)" `331 
v L "var" 2 758 "int32" `332 
v L "offset" 2 758 "int8" `336 
f G "make8" 2 758 "int8(int32 var,int8 offset)" `334 
v L "varhigh" 2 759 "int8" `338 
v L "varlow" 2 759 "int8" `339 
f B "make16" 2 759 "int16(int8 varhigh,int8 varlow)" `337 
v L "var1" 2 760 "int16" `341 
f B "make32" 2 760 "int32(int16 var1)" `340 
v L "var1" 2 761 "int16" `343 
v L "var2" 2 761 "int16" `344 
f G "make32" 2 761 "int32(int16 var1,int16 var2)" `342 
v L "var1" 2 762 "int16" `343 
v L "var2" 2 762 "int8" `347 
f G "make32" 2 762 "int32(int16 var1,int8 var2)" `345 
v L "var1" 2 763 "int16" `349 
v L "var2" 2 763 "int8" `350 
v L "var3" 2 763 "int8" `351 
f G "make32" 2 763 "int32(int16 var1,int8 var2,int8 var3)" `348 
v L "var1" 2 764 "int8" `353 
f G "make32" 2 764 "int32(int8 var1)" `352 
v L "var1" 2 765 "int8" `343 
v L "var2" 2 765 "int8" `356 
f G "make32" 2 765 "int32(int8 var1,int8 var2)" `354 
v L "var1" 2 766 "int8" `349 
v L "var2" 2 766 "int8" `350 
v L "var3" 2 766 "int8" `360 
f G "make32" 2 766 "int32(int8 var1,int8 var2,int8 var3)" `357 
v L "var1" 2 767 "int8" `362 
v L "var2" 2 767 "int8" `363 
v L "var3" 2 767 "int8" `364 
v L "var4" 2 767 "int8" `365 
f G "make32" 2 767 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `361 
v L "var1" 2 768 "int8" `343 
v L "var2" 2 768 "int16" `368 
f G "make32" 2 768 "int32(int8 var1,int16 var2)" `366 
v L "var1" 2 769 "int8" `349 
v L "var2" 2 769 "int16" `350 
v L "var3" 2 769 "int8" `372 
f G "make32" 2 769 "int32(int8 var1,int16 var2,int8 var3)" `369 
v L "var1" 2 770 "int8" `349 
v L "var2" 2 770 "int8" `350 
v L "var3" 2 770 "int16" `376 
f G "make32" 2 770 "int32(int8 var1,int8 var2,int16 var3)" `373 
v L "var" 2 771 "int8" `378 
v L "bit" 2 771 "int8" `379 
f B "bit_set" 2 771 "void(int8 var,int8 bit)" `377 
v L "var" 2 772 "int16" `378 
v L "bit" 2 772 "int8" `382 
f G "bit_set" 2 772 "void(int16 var,int8 bit)" `380 
v L "var" 2 773 "int32" `378 
v L "bit" 2 773 "int8" `385 
f G "bit_set" 2 773 "void(int32 var,int8 bit)" `383 
v L "var" 2 774 "int8" `387 
v L "bit" 2 774 "int8" `388 
f B "bit_clear" 2 774 "void(int8 var,int8 bit)" `386 
v L "var" 2 775 "int16" `387 
v L "bit" 2 775 "int8" `391 
f G "bit_clear" 2 775 "void(int16 var,int8 bit)" `389 
v L "var" 2 776 "int32" `387 
v L "bit" 2 776 "int8" `394 
f G "bit_clear" 2 776 "void(int32 var,int8 bit)" `392 
v L "var" 2 777 "int8" `396 
v L "bit" 2 777 "int8" `397 
f B "bit_test" 2 777 "int8(int8 var,int8 bit)" `395 
v L "var" 2 778 "int16" `396 
v L "bit" 2 778 "int8" `400 
f G "bit_test" 2 778 "int8(int16 var,int8 bit)" `398 
v L "var" 2 779 "int32" `396 
v L "bit" 2 779 "int8" `403 
f G "bit_test" 2 779 "int8(int32 var,int8 bit)" `401  "#use delay() Prototypes:"
v L "count" 2 782 "int8" `405 
f B "delay_cycles" 2 782 "void(int8 count)" `404 
v L "time" 2 783 "int16" `407 
f B "delay_ms" 2 783 "void(int16 time)" `406 
v L "time" 2 784 "int16" `409 
f B "delay_us" 2 784 "void(int16 time)" `408  "#use rs232() Prototypes:"
v L "cdata" 2 787 "int8" `411 
f B "putchar" 2 787 "void(int8 cdata)" `410 
v L "cdata" 2 788 "int8" `413 
v L "stream" 2 788 "int8" `414 
f G "putchar" 2 788 "void(int8 cdata,int8 stream)" `412 
v L "string" 2 789 "*int8" `416 
f B "puts" 2 789 "void(*int8 string)" `415 
v L "string" 2 790 "*int8" `418 
v L "stream" 2 790 "int8" `419 
f G "puts" 2 790 "void(*int8 string,int8 stream)" `417 
f B "getch" 2 791 "int8()" `420 
v L "stream" 2 792 "int8" `422 
f G "getch" 2 792 "int8(int8 stream)" `421 
v L "string" 2 793 "*int8" `424 
f B "gets" 2 793 "void(*int8 string)" `423 
v L "string" 2 794 "*int8" `426 
v L "stream" 2 794 "int8" `427 
f G "gets" 2 794 "void(*int8 string,int8 stream)" `425 
f B "kbhit" 2 795 "int8()" `428 
v L "stream" 2 796 "int8" `430 
f G "kbhit" 2 796 "int8(int8 stream)" `429 
v L "string" 2 797 "*int8" `432 
f B "printf" 2 797 "void(*int8 string,*int8 _VA_LIST)" `431 
v L "stream" 2 798 "int8" `435 
v L "string" 2 798 "*int8" `436 
f B "fprintf" 2 798 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `434 
f B "putc_send" 2 799 "void()" `438 
v L "stream" 2 800 "int8" `440 
f B "fputc_send" 2 800 "void(int8 stream)" `439 
f B "rcv_buffer_full" 2 801 "int8()" `441 
v L "stream" 2 802 "int8" `443 
f G "rcv_buffer_full" 2 802 "int8(int8 stream)" `442 
f B "rcv_buffer_bytes" 2 803 "int16()" `444 
v L "stream" 2 804 "int8" `446 
f G "rcv_buffer_bytes" 2 804 "int16(int8 stream)" `445 
f B "tx_buffer_full" 2 805 "int8()" `447 
v L "stream" 2 806 "int8" `449 
f G "tx_buffer_full" 2 806 "int8(int8 stream)" `448 
f B "tx_buffer_bytes" 2 807 "int16()" `450 
v L "stream" 2 808 "int8" `452 
f G "tx_buffer_bytes" 2 808 "int16(int8 stream)" `451  "#use i2c() Prototypes:"
f B "i2c_read" 2 811 "int8()" `453 
v L "stream" 2 812 "int8" `455 
f G "i2c_read" 2 812 "int8(int8 stream)" `454 
v L "stream" 2 813 "int8" `457 
v L "ack" 2 813 "int8" `458 
f G "i2c_read" 2 813 "int8(int8 stream,int8 ack)" `456 
v L "data" 2 814 "int8" `460 
f B "i2c_write" 2 814 "int8(int8 data)" `459 
v L "stream" 2 815 "int8" `462 
v L "data" 2 815 "int8" `463 
f G "i2c_write" 2 815 "int8(int8 stream,int8 data)" `461 
f B "i2c_start" 2 816 "void()" `464 
v L "stream" 2 817 "int8" `466 
f G "i2c_start" 2 817 "void(int8 stream)" `465 
v L "stream" 2 818 "int8" `468 
v L "restart" 2 818 "int8" `469 
f G "i2c_start" 2 818 "void(int8 stream,int8 restart)" `467 
f B "i2c_stop" 2 819 "void()" `470 
v L "stream" 2 820 "int8" `472 
f G "i2c_stop" 2 820 "void(int8 stream)" `471 
f B "i2c_isr_state" 2 821 "int8()" `473 
v L "addr" 2 822 "int8" `475 
f B "i2c_slaveaddr" 2 822 "void(int8 addr)" `474 
v L "stream" 2 823 "int8" `477 
v L "addr" 2 823 "int8" `478 
f G "i2c_slaveaddr" 2 823 "void(int8 stream,int8 addr)" `476 
f B "i2c_poll" 2 824 "int8()" `479 
v L "stream" 2 825 "int8" `481 
f G "i2c_poll" 2 825 "int8(int8 stream)" `480 
v L "baud" 2 826 "int32" `483 
f B "i2c_init" 2 826 "void(int32 baud)" `482 
v L "stream" 2 827 "int8" `485 
v L "baud" 2 827 "int32" `486 
f G "i2c_init" 2 827 "void(int8 stream,int32 baud)" `484  "#use spi() Prototypes:"
f B "spi_xfer" 2 830 "int8()" `487 
f G "spi_xfer" 2 831 "int16()" `488 
f G "spi_xfer" 2 832 "int32()" `489 
v L "data" 2 833 "int8" `491 
f G "spi_xfer" 2 833 "int8(int8 data)" `490 
v L "data" 2 834 "int16" `493 
f G "spi_xfer" 2 834 "int16(int16 data)" `492 
v L "data" 2 835 "int32" `495 
f G "spi_xfer" 2 835 "int32(int32 data)" `494 
v L "stream" 2 836 "int8" `497 
v L "data" 2 836 "int8" `498 
f G "spi_xfer" 2 836 "int8(int8 stream,int8 data)" `496 
v L "stream" 2 837 "int8" `497 
v L "data" 2 837 "int16" `501 
f G "spi_xfer" 2 837 "int16(int8 stream,int16 data)" `499 
v L "stream" 2 838 "int8" `497 
v L "data" 2 838 "int32" `504 
f G "spi_xfer" 2 838 "int32(int8 stream,int32 data)" `502 
v L "stream" 2 839 "int8" `506 
v L "data" 2 839 "int8" `507 
v L "bits" 2 839 "int8" `508 
f G "spi_xfer" 2 839 "int8(int8 stream,int8 data,int8 bits)" `505 
v L "stream" 2 840 "int8" `506 
v L "data" 2 840 "int16" `507 
v L "bits" 2 840 "int8" `512 
f G "spi_xfer" 2 840 "int16(int8 stream,int16 data,int8 bits)" `509 
v L "stream" 2 841 "int8" `506 
v L "data" 2 841 "int32" `507 
v L "bits" 2 841 "int8" `516 
f G "spi_xfer" 2 841 "int32(int8 stream,int32 data,int8 bits)" `513 
v L "baud" 2 842 "int32" `518 
f B "spi_init" 2 842 "void(int32 baud)" `517 
v L "stream" 2 843 "int8" `520 
v L "baud" 2 843 "int32" `521 
f G "spi_init" 2 843 "void(int8 stream,int32 baud)" `519 
v L "baud" 2 844 "int32" `523 
f B "spi_speed" 2 844 "void(int32 baud)" `522 
v L "stream" 2 845 "int8" `525 
v L "baud" 2 845 "int32" `526 
f G "spi_speed" 2 845 "void(int8 stream,int32 baud)" `524 
v L "stream" 2 846 "int8" `528 
v L "baud" 2 846 "int32" `529 
v L "clock" 2 846 "int32" `530 
f G "spi_speed" 2 846 "void(int8 stream,int32 baud,int32 clock)" `527 
v L "data" 2 847 "int8" `532 
f B "spi_prewrite" 2 847 "void(int8 data)" `531 
v L "data" 2 848 "int16" `534 
f G "spi_prewrite" 2 848 "void(int16 data)" `533 
v L "data" 2 849 "int32" `536 
f G "spi_prewrite" 2 849 "void(int32 data)" `535 
v L "??65535" 2 850 "int8" `538 
v L "data" 2 850 "int8" `539 
f G "spi_prewrite" 2 850 "void(int8 ,int8 data)" `537 
v L "??65535" 2 851 "int8" `538 
v L "data" 2 851 "int16" `542 
f G "spi_prewrite" 2 851 "void(int8 ,int16 data)" `540 
v L "??65535" 2 852 "int8" `538 
v L "data" 2 852 "int32" `545 
f G "spi_prewrite" 2 852 "void(int8 ,int32 data)" `543 
f B "spi_xfer_in" 2 853 "int8()" `546 
f G "spi_xfer_in" 2 854 "int16()" `547 
f G "spi_xfer_in" 2 855 "int32()" `548 
v L "bits" 2 856 "int8" `550 
f G "spi_xfer_in" 2 856 "int8(int8 bits)" `549 
v L "bits" 2 857 "int8" `552 
f G "spi_xfer_in" 2 857 "int16(int8 bits)" `551 
v L "bits" 2 858 "int8" `554 
f G "spi_xfer_in" 2 858 "int32(int8 bits)" `553 
v L "stream" 2 859 "int8" `556 
v L "bits" 2 859 "int8" `557 
f G "spi_xfer_in" 2 859 "int8(int8 stream,int8 bits)" `555 
v L "stream" 2 860 "int8" `556 
v L "bits" 2 860 "int8" `560 
f G "spi_xfer_in" 2 860 "int16(int8 stream,int8 bits)" `558 
v L "stream" 2 861 "int8" `556 
v L "bits" 2 861 "int8" `563 
f G "spi_xfer_in" 2 861 "int32(int8 stream,int8 bits)" `561  "#use rtos() Prototypes:"
f B "rtos_run" 2 864 "void()" `564 
f B "rtos_yield" 2 865 "void()" `565 
v L "task" 2 866 "int8" `567 
f B "rtos_enable" 2 866 "void(int8 task)" `566 
v L "task" 2 867 "int8" `569 
f B "rtos_disable" 2 867 "void(int8 task)" `568 
f B "rtos_terminate" 2 868 "void()" `570 
v L "flag" 2 869 "int8" `572 
f B "rtos_await" 2 869 "void(int8 flag)" `571 
v L "sem" 2 870 "int8" `574 
f B "rtos_wait" 2 870 "void(int8 sem)" `573 
v L "sem" 2 871 "int8" `576 
f B "rtos_signal" 2 871 "void(int8 sem)" `575 
v L "task" 2 872 "int8" `578 
v L "msg" 2 872 "int8" `579 
f B "rtos_msg_send" 2 872 "void(int8 task,int8 msg)" `577 
f B "rtos_msg_read" 2 873 "int8()" `580 
f B "rtos_msg_poll" 2 874 "int8()" `581 
v L "task" 2 875 "int8" `583 
f B "rtos_overrun" 2 875 "int8(int8 task)" `582 
v L "task" 2 876 "int8" `585 
v L "stat" 2 876 "*int8" `586 
f B "rtos_stats" 2 876 "void(int8 task,*int8 stat)" `584  "#use timer() Prototypes:"
f B "get_ticks" 2 879 "int8()" `587 
f G "get_ticks" 2 880 "int16()" `588 
f G "get_ticks" 2 881 "int32()" `589 
v L "stream" 2 882 "int8" `591 
f G "get_ticks" 2 882 "int8(int8 stream)" `590 
v L "stream" 2 883 "int8" `593 
f G "get_ticks" 2 883 "int16(int8 stream)" `592 
v L "stream" 2 884 "int8" `595 
f G "get_ticks" 2 884 "int32(int8 stream)" `594 
v L "value" 2 885 "int8" `597 
f B "set_ticks" 2 885 "void(int8 value)" `596 
v L "value" 2 886 "int16" `599 
f G "set_ticks" 2 886 "void(int16 value)" `598 
v L "value" 2 887 "int32" `601 
f G "set_ticks" 2 887 "void(int32 value)" `600 
v L "stream" 2 888 "int8" `603 
v L "value" 2 888 "int8" `604 
f G "set_ticks" 2 888 "void(int8 stream,int8 value)" `602 
v L "stream" 2 889 "int8" `603 
v L "value" 2 889 "int16" `607 
f G "set_ticks" 2 889 "void(int8 stream,int16 value)" `605 
v L "stream" 2 890 "int8" `603 
v L "value" 2 890 "int32" `610 
f G "set_ticks" 2 890 "void(int8 stream,int32 value)" `608  "#use pwm() Prototypes:"
f B "pwm_on" 2 893 "void()" `611 
v L "stream" 2 894 "int8" `613 
f G "pwm_on" 2 894 "void(int8 stream)" `612 
f B "pwm_off" 2 895 "void()" `614 
v L "stream" 2 896 "int8" `616 
f G "pwm_off" 2 896 "void(int8 stream)" `615 
v L "duty" 2 897 "int16" `618 
f B "pwm_set_duty" 2 897 "void(int16 duty)" `617 
v L "stream" 2 898 "int8" `620 
v L "duty" 2 898 "int16" `621 
f G "pwm_set_duty" 2 898 "void(int8 stream,int16 duty)" `619 
v L "percent" 2 899 "int16" `623 
f B "pwm_set_duty_percent" 2 899 "void(int16 percent)" `622 
v L "stream" 2 900 "int8" `625 
v L "percent" 2 900 "int16" `626 
f G "pwm_set_duty_percent" 2 900 "void(int8 stream,int16 percent)" `624 
v L "frequency" 2 901 "int32" `628 
f B "pwm_set_frequency" 2 901 "void(int32 frequency)" `627 
v L "stream" 2 902 "int8" `630 
v L "frequency" 2 902 "int32" `631 
f G "pwm_set_frequency" 2 902 "void(int8 stream,int32 frequency)" `629  "#use capture() Prototypes:"
f B "get_capture_time" 2 905 "int16()" `632 
v L "stream" 2 906 "int8" `634 
f G "get_capture_time" 2 906 "int16(int8 stream)" `633 
f B "get_capture_event" 2 907 "int8()" `635 
v L "stream" 2 908 "int8" `637 
f G "get_capture_event" 2 908 "int8(int8 stream)" `636  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 921 "int16" `639 
f B "goto_address" 2 921 "void(int16 address)" `638 
v L "label" 2 922 "int16" `641 
f B "label_address" 2 922 "int16(int16 label)" `640  "Program Memory Prototypes:"
v L "address" 2 925 "int16" `643 
v L "dataptr" 2 925 "*int8" `644 
v L "count" 2 925 "int16" `645 
f B "read_program_memory" 2 925 "void(int16 address,*int8 dataptr,int16 count)" `642 
v L "address" 2 926 "int16" `647 
f B "read_program_eeprom" 2 926 "int16(int16 address)" `646 
v L "address" 2 927 "int16" `649 
f B "erase_program_eeprom" 2 927 "void(int16 address)" `648 
v L "address" 2 928 "int16" `651 
v L "dataptr" 2 928 "*int8" `652 
v L "count" 2 928 "int16" `653 
f B "write_program_memory" 2 928 "void(int16 address,*int8 dataptr,int16 count)" `650 
v L "address" 2 929 "int16" `655 
v L "data" 2 929 "int16" `656 
f B "write_program_eeprom" 2 929 "void(int16 address,int16 data)" `654  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 934 "int16" `657 
v L "address" 2 939 "__EEADDRESS__" `659 
f B "read_eeprom" 2 939 "int8(__EEADDRESS__ address)" `658 
v L "address" 2 940 "__EEADDRESS__" `661 
v L "value" 2 940 "int8" `662 
f B "write_eeprom" 2 940 "void(__EEADDRESS__ address,int8 value)" `660  "#use touchpad() Prototypes:"
v L "state" 2 943 "int8" `664 
f B "touchpad_state" 2 943 "void(int8 state)" `663 
f B "touchpad_getc" 2 944 "int8()" `665 
f B "touchpad_hit" 2 945 "int8()" `666  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
v L "interrupt" 2 951 "int32" `668 
f B "enable_interrupts" 2 951 "void(int32 interrupt)" `667 
v L "interrupt" 2 952 "int32" `670 
f B "disable_interrupts" 2 952 "void(int32 interrupt)" `669 
v L "interrupt" 2 953 "int32" `672 
f B "clear_interrupt" 2 953 "void(int32 interrupt)" `671 
v L "interrupt" 2 954 "int32" `674 
f B "interrupt_active" 2 954 "int8(int32 interrupt)" `673 
v L "interrupt" 2 955 "int32" `676 
f B "interrupt_enabled" 2 955 "int8(int32 interrupt)" `675 
v L "source" 2 956 "int8" `678 
v L "edge" 2 956 "int8" `679 
f B "ext_int_edge" 2 956 "void(int8 source,int8 edge)" `677 
v L "address" 2 957 "int16" `681 
f B "jump_to_isr" 2 957 "void(int16 address)" `680  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 959 "0x40"
d G "H_TO_L" 2 960 "0"
d G "GLOBAL" 2 962 "0x0BC0"
d G "PERIPH" 2 963 "0x0B40"
d G "INT_RB" 2 964 "0x31FF0B08"
d G "INT_EXT_L2H" 2 965 "0x50000B10"
d G "INT_EXT_H2L" 2 966 "0x60000B10"
d G "INT_EXT" 2 967 "0x300B10"
d G "INT_TIMER0" 2 968 "0x300B20"
d G "INT_TIMER1" 2 969 "0x309101"
d G "INT_TIMER2" 2 970 "0x309102"
d G "INT_CCP1" 2 971 "0x309104"
d G "INT_SSP" 2 972 "0x309108"
d G "INT_TBE" 2 973 "0x309110"
d G "INT_RDA" 2 974 "0x309120"
d G "INT_AD" 2 975 "0x309140"
d G "INT_TIMER1_GATE" 2 976 "0x309180"
d G "INT_LCD" 2 977 "0x309204"
d G "INT_BUSCOL" 2 978 "0x309208"
d G "INT_EEPROM" 2 979 "0x309210"
d G "INT_COMP" 2 980 "0x309220"
d G "INT_COMP2" 2 981 "0x309240"
d G "INT_OSC_FAIL" 2 982 "0x309280"
d G "INT_TIMER4" 2 983 "0x309302"
d G "INT_TIMER6" 2 984 "0x309308"
d G "INT_CCP3" 2 985 "0x309310"
d G "INT_CCP4" 2 986 "0x309320"
d G "INT_CCP5" 2 987 "0x309340"
d G "INT_CCP2" 2 988 "0x309201"
d G "INT_RB0" 2 989 "0x31010B08"
d G "INT_RB0_L2H" 2 990 "0x11010B08"
d G "INT_RB0_H2L" 2 991 "0x21010B08"
d G "INT_RB1" 2 992 "0x31020B08"
d G "INT_RB1_L2H" 2 993 "0x11020B08"
d G "INT_RB1_H2L" 2 994 "0x21020B08"
d G "INT_RB2" 2 995 "0x31040B08"
d G "INT_RB2_L2H" 2 996 "0x11040B08"
d G "INT_RB2_H2L" 2 997 "0x21040B08"
d G "INT_RB3" 2 998 "0x31080B08"
d G "INT_RB3_L2H" 2 999 "0x11080B08"
d G "INT_RB3_H2L" 2 1000 "0x21080B08"
d G "INT_RB4" 2 1001 "0x31100B08"
d G "INT_RB4_L2H" 2 1002 "0x11100B08"
d G "INT_RB4_H2L" 2 1003 "0x21100B08"
d G "INT_RB5" 2 1004 "0x31200B08"
d G "INT_RB5_L2H" 2 1005 "0x11200B08"
d G "INT_RB5_H2L" 2 1006 "0x21200B08"
d G "INT_RB6" 2 1007 "0x31400B08"
d G "INT_RB6_L2H" 2 1008 "0x11400B08"
d G "INT_RB6_H2L" 2 1009 "0x21400B08"
d G "INT_RB7" 2 1010 "0x31800B08"
d G "INT_RB7_L2H" 2 1011 "0x11800B08"
d G "INT_RB7_H2L" 2 1012 "0x21800B08"
C L "jump_to_isr" 1 15 2 "FUNCTION"
T G "bool" 1 21 "int1" `688 
D G "ON_DELAY_US" 1 23 "2000"
D G "CHECK_BIT" 1 25 "(var,pos) ((var) & (1<<(pos)))"
V G "Trans" 1 27 "int8[1]" `689 
V G "gPin" 1 29 "int8[1]" `690 
V G "bPin" 1 30 "int8[1]" `691 
V G "rPin" 1 31 "int8[1]" `692 
V G "redA" 0 3 "int8[8][8]" `693 
V G "greenA" 0 4 "int8[8][8]" `695 
V G "blueA" 0 5 "int8[8][8]" `697 
V G "_address" 0 7 "int8" `699 
V G "_digits" 0 8 "int8[3]" `700 
V G "_cnt" 0 10 "int16" `701 
F G "clearDisplay" 0 13 "void()" `702 
V L "x" 0 15 "int8" `703 
V L "y" 0 16 "int8" `704 
V L "r" 0 25 "int8" `706 
V L "g" 0 25 "int8" `707 
V L "b" 0 25 "int8" `708 
F G "clearDisplayColor" 0 25 "void(int8 r,int8 g,int8 b)" `705 
V L "x" 0 27 "int8" `709 
V L "y" 0 28 "int8" `710 
V L "x" 0 36 "int8" `712 
V L "y" 0 36 "int8" `713 
V L "red" 0 36 "int8" `714 
V L "green" 0 36 "int8" `715 
V L "blue" 0 36 "int8" `716 
F G "SetLEDPosition" 0 36 "void(int8 x,int8 y,int8 red,int8 green,int8 blue)" `711 
F G "loop1" 0 43 "void()" `717 
V L "x" 0 45 "int8" `718 
C L "loop1" 0 75 1 "FUNCTION"
C L "loop1" 0 75 1 "FUNCTION"
V G "_mode" 0 163 "int8" `723 
V G "_changeAddress" 0 164 "int8" `724 
V G "_tmp" 0 165 "int8" `725 
V G "_state" 0 166 "int8" `726 
F G "ssp_interupt" 0 169 "void()" `727 
C L "ssp_interupt" 0 75 2 "FUNCTION"
C L "ssp_interupt" 0 75 2 "FUNCTION"
C L "ssp_interupt" 0 75 1 "FUNCTION"
C L "ssp_interupt" 0 75 1 "FUNCTION"
C L "ssp_interupt" 0 75 1 "FUNCTION"
C L "ssp_interupt" 0 75 1 "FUNCTION"
C L "ssp_interupt" 0 75 1 "FUNCTION"
V L "y" 0 213 "int8" `729 
V L "x" 0 214 "int8" `730 
C L "ssp_interupt" 0 75 1 "FUNCTION"
C L "ssp_interupt" 0 75 1 "FUNCTION"
V L "digit" 0 254 "int8" `732 
F G "displayDigit" 0 254 "void(int8 digit)" `731 
F G "isr_tmr1" 0 464 "void()" `734 
F G "MAIN" 0 488 "void()" `735 
V L "digitsSize" 0 501 "int8" `738 
C L "MAIN" 0 75 1 "FUNCTION"
C L "MAIN" 0 75 1 "FUNCTION"
V L "t" 0 510 "int8" `742 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_lcd" 1 3
F B "lcd_contrast" 1 0
F B "lcd_load" 3 0
F B "lcd_symbol" F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_slaveaddr" 1 2
F B "i2c_poll" 0 1
F B "i2c_init" 1 2
